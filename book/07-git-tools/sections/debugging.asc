=== 使用 Git 调试

Git 也提供了两个工具来辅助您调试项目中的问题。
由于 Git 被设计成适用于几乎所有类型的项目，这些工具是比较通用的，但它们可以在出现问题的时候帮助您找到 bug 或者错误。

[[_file_annotation]]
==== 文件标注

如果您在追踪代码中的一个 bug，并且想知道是什么时候以及为何会引入，文件标注通常是最好用的工具。
它展示了文件中每一行最后一次修改的提交。
所以，如果您在代码中看到一个有问题的方法，您可以使用 `git blame` 标注这个文件，查看这个方法每一行的最后修改时间以及是被谁修改的。
这个例子使用 `-L` 选项来限制输出范围在第12至22行：

[source,console]
----
$ git blame -L 12,22 simplegit.rb
^4832fe2 (Scott Chacon  2008-03-15 10:31:28 -0700 12)  def show(tree = 'master')
^4832fe2 (Scott Chacon  2008-03-15 10:31:28 -0700 13)   command("git show #{tree}")
^4832fe2 (Scott Chacon  2008-03-15 10:31:28 -0700 14)  end
^4832fe2 (Scott Chacon  2008-03-15 10:31:28 -0700 15)
9f6560e4 (Scott Chacon  2008-03-17 21:52:20 -0700 16)  def log(tree = 'master')
79eaf55d (Scott Chacon  2008-04-06 10:15:08 -0700 17)   command("git log #{tree}")
9f6560e4 (Scott Chacon  2008-03-17 21:52:20 -0700 18)  end
9f6560e4 (Scott Chacon  2008-03-17 21:52:20 -0700 19)
42cf2861 (Magnus Chacon 2008-04-13 10:45:01 -0700 20)  def blame(path)
42cf2861 (Magnus Chacon 2008-04-13 10:45:01 -0700 21)   command("git blame #{path}")
42cf2861 (Magnus Chacon 2008-04-13 10:45:01 -0700 22)  end
----

请注意，第一个字段是最后一次修改该行的提交的部分 SHA-1 值。
接下来两个字段的值是从提交中提取出来的——作者的名字以及提交的时间——所以您就可以很轻易地找到是谁在什么时候修改了那一行。
接下来就是行号和文件内容。
注意一下 `^4832fe2` 这个提交的那些行，这些指的是这个文件第一次提交的那些行。
这个提交是这个文件第一次加入到这个项目时的提交，并且这些行从未被修改过。
这会带来小小的困惑，因为您已经至少看到三种 Git 使用 `^` 来修饰一个提交的 SHA 值的不同含义，但这里确实就是这个意思。

Another cool thing about Git is that it doesn’t track file renames explicitly.
It records the snapshots and then tries to figure out what was renamed implicitly, after the fact.
One of the interesting features of this is that you can ask it to figure out all sorts of code movement as well.
If you pass `-C` to `git blame`, Git analyzes the file you’re annotating and tries to figure out where snippets of code within it originally came from if they were copied from elsewhere.
For example, say you are refactoring a file named `GITServerHandler.m` into multiple files, one of which is `GITPackUpload.m`.
By blaming `GITPackUpload.m` with the `-C` option, you can see where sections of the code originally came from:

[source,console]
----
$ git blame -C -L 141,153 GITPackUpload.m
f344f58d GITServerHandler.m (Scott 2009-01-04 141)
f344f58d GITServerHandler.m (Scott 2009-01-04 142) - (void) gatherObjectShasFromC
f344f58d GITServerHandler.m (Scott 2009-01-04 143) {
70befddd GITServerHandler.m (Scott 2009-03-22 144)         //NSLog(@"GATHER COMMI
ad11ac80 GITPackUpload.m    (Scott 2009-03-24 145)
ad11ac80 GITPackUpload.m    (Scott 2009-03-24 146)         NSString *parentSha;
ad11ac80 GITPackUpload.m    (Scott 2009-03-24 147)         GITCommit *commit = [g
ad11ac80 GITPackUpload.m    (Scott 2009-03-24 148)
ad11ac80 GITPackUpload.m    (Scott 2009-03-24 149)         //NSLog(@"GATHER COMMI
ad11ac80 GITPackUpload.m    (Scott 2009-03-24 150)
56ef2caf GITServerHandler.m (Scott 2009-01-05 151)         if(commit) {
56ef2caf GITServerHandler.m (Scott 2009-01-05 152)                 [refDict setOb
56ef2caf GITServerHandler.m (Scott 2009-01-05 153)
----

This is really useful.
Normally, you get as the original commit the commit where you copied the code over, because that is the first time you touched those lines in this file.
Git tells you the original commit where you wrote those lines, even if it was in another file.

[[_binary_search]]
==== 二分查找

当您知道问题是在哪里引入的情况下文件标注可以帮助您查找问题。
如果您不知道哪里出了问题，并且自从上次可以正常运行到现在已经有数十个或者上百个提交，这个时候您可以使用 `git bisect` 来帮助查找。
`bisect` 命令会对您的提交历史进行二分查找来帮助您尽快找到是哪一个提交引入了问题。

假设您刚刚在线上环境部署了您的代码，接着收到一些 bug 反馈，但这些 bug 在您之前的开发环境里没有出现过，这让您百思不得其解。
您重新查看了您的代码，发现这个问题是可以被重现的，但是您不知道哪里出了问题。
您可以用二分法来找到这个问题。
首先执行 `git bisect start` 来启动，接着执行 `git bisect bad` 来告诉系统当前你所在的提交是有问题的。
然后您必须告诉 bisect 已知的最后一次正常状态是哪次提交，使用 `git bisect good [good_commit]`：

[source,console]
----
$ git bisect start
$ git bisect bad
$ git bisect good v1.0
Bisecting: 6 revisions left to test after this
[ecb6e1bc347ccecc5f9350d878ce677feb13d3b2] error handling on repo
----

Git 发现在您标记为正常的提交(v1.0)和当前的错误版本之间有大约12次提交，于是 Git 检出中间的那个提交。
现在您可以执行测试，看看在这个提交下问题是不是还是存在。
如果还存在，说明问题是在这个提交之前引入的；如果问题不存在，说明问题是在这个提交之后引入的。
假设测试结果是没有问题的，您可以通过 `git bisect good` 来告诉 Git，然后继续寻找。

[source,console]
----
$ git bisect good
Bisecting: 3 revisions left to test after this
[b047b02ea83310a70fd603dc8cd7a6cd13d15c04] secure this thing
----

现在您在另一个提交上了，这个提交是刚刚那个测试通过的提交和有问题的提交的中点。
您再一次执行测试，发现这个提交下是有问题的，因此您可以通过 `git bisect bad` 告诉 Git：

[source,console]
----
$ git bisect bad
Bisecting: 1 revisions left to test after this
[f71ce38690acf49c1f3c9bea38e09d82a5ce6014] drop exceptions table
----

这个提交是正常的，现在 Git 已经拥有了确定问题引入位置所需的所有信息。
它会告诉您第一个错误提交的 SHA-1 值并显示一些提交说明，以及哪些文件在那次提交里修改过，这样您可以找出引入 bug 的根源：

[source,console]
----
$ git bisect good
b047b02ea83310a70fd603dc8cd7a6cd13d15c04 is first bad commit
commit b047b02ea83310a70fd603dc8cd7a6cd13d15c04
Author: PJ Hyett <pjhyett@example.com>
Date:   Tue Jan 27 14:48:32 2009 -0800

    secure this thing

:040000 040000 40ee3e7821b895e52c1695092db9bdc4c61d1730
f24d3c6ebcfc639b1a3814550e62d60b8e68a8e4 M  config
----

When you’re finished, you should run `git bisect reset` to reset your HEAD to where you were before you started, or you’ll end up in a weird state:

[source,console]
----
$ git bisect reset
----

This is a powerful tool that can help you check hundreds of commits for an introduced bug in minutes.
In fact, if you have a script that will exit 0 if the project is good or non-0 if the project is bad, you can fully automate `git bisect`.
First, you again tell it the scope of the bisect by providing the known bad and good commits.
You can do this by listing them with the `bisect start` command if you want, listing the known bad commit first and the known good commit second:

[source,console]
----
$ git bisect start HEAD v1.0
$ git bisect run test-error.sh
----

Doing so automatically runs `test-error.sh` on each checked-out commit until Git finds the first broken commit.
You can also run something like `make` or `make tests` or whatever you have that runs automated tests for you.
