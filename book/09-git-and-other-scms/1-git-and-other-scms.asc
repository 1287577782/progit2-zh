== Git 与其他系统

世界并不完美。
通常，你不可能在接触 Git 之后就立即将每一个项目都切换成 Git。
有时候你被困在使用其他 VCS 的项目中，然而却希望它是 Git。
本章的第一部分我们将会了解到，如果你工作的项目托管在另一个系统中，如何将 Git 作为客户端使用。

在某些时候，你可能想要转换当前的项目到 Git。
本章的第二部分包含如何从几个特定的系统中迁移你的项目到 Git，如果不存在预先构建好的导入工具的话也会有其他一些方法。

=== Git 作为客户端

(((Git as a client)))
Git 为开发者提供了如此优秀的体验，许多人已经解决了如何在他们的工作站上使用 Git，即使他们团队剩下的人使用的是完全不同的 VCS。
有许多这种适配器，叫作 ``桥接'' 可用。
下面我们将要介绍几个很可能会在实际中用到的。

include::sections/client-svn.asc[]

include::sections/client-hg.asc[]

include::sections/client-p4.asc[]

include::sections/client-tfs.asc[]

[[_migrating]]
=== 迁移到 Git

(((Migrating to Git)))
如果你有一个现有的使用其他 VCS 的代码库但是你已经决定开始使用 Git，你必须用一种或其他方式迁移项目。
这一部分会介绍一些通用系统的导入器，然后演示如何开发你自己的自定义的导入器。
你将会学习如何从几个大型专业应用的 SCM 系统中导入数据，因为它们是想要转换的大多数用户，同时是因为针对它们的高质量工具也容易获得。

include::sections/import-svn.asc[]

include::sections/import-hg.asc[]

include::sections/import-p4.asc[]

include::sections/import-tfs.asc[]

include::sections/import-custom.asc[]

=== 总结

将 Git 作为其他版本控制系统的客户端，或者从几乎任何一个现有的仓库不用丢失数据地导入到 Git 会让你感觉很舒服。
在下一章，我们将要讲解 Git 的原始内部数据，如果需要的话你就可以生成每一个字节。
