[[_git_branches_overview]]
=== 分支简介

为了真正理解 Git 处理分支的方式，我们需要回顾一下 Git 是如何保存数据的。

或许您还记得 <<_getting_started>> 的内容，Git 保存的不是文件的变化或者差异，而是一系列不同时刻的文件快照。

在进行提交操作时，Git 会保存一个提交对象（commit object）。知道了 Git 保存数据的方式，我们可以很自然的想到——该提交对象会包含一个指向暂存内容快照的指针。但不仅仅是这样，该提交对象还包含了作者的姓名和邮箱、提交时输入的信息以及指向它的父对象的指针。首次提交产生的提交对象没有父对象，普通提交操作产生的提交对象有一个父对象，而由多个分支合并产生的提交对象有多个父对象，

为了说得更加形象，我们假设现在有一个工作目录，里面包含了三个将要被暂存和提交的文件。
暂存操作会为每一个文件计算校验和（使用我们在 <<_getting_started>> 中提到的　SHA-1 哈希算法），然后会把当前版本的文件快照保存到 Git 仓库中（Git 使用blob对象来保存它们），最终将校验和加入到暂存区域等待提交：

[source,console]
----
$ git add README test.rb LICENSE
$ git commit -m 'initial commit of my project'
----

当使用 `git commit` 进行提交操作时，Git 会先计算每一个子目录（本例中只用项目根目录）的检验和，然后在 Git 仓库中奖这些检验和保存为一个目录树对象。
随后，Git 便会创建一个提交对象，它除了包含上面提到的那些信息外，还包含指向这个树对象（项目根目录）的指针。如此一来，Git 就可以在需要的时候重现此次保存的快照。(((git commands, commit)))

现在，Git 仓库中有五个对象：三个blob对象（保存着文件快照）、一个树对象（记录着目录结构和blob对象索引）以及一个提交对象（包含着指向前述树对象的指针和所有提交信息）。

.首次提交对象和它的树结构
image::images/commit-and-tree.png[首次提交对象和它的树结构.]

做些修改后再次提交，那么这次产生的提交对象会包含一个指向上次提交对象（父对象）的指针。

.多个提交对象之间的关系
image::images/commits-and-parents.png[多个提交对象之间的关系.]

说完了 Git 保存数据的方式，现在让我们谈回分支。
Git 的分支，其实本质上仅仅是指向提交对象的可变指针。
Git 的默认分支名字是 `master`。
在多次提交操作之后，您其实已经有一个指向最后那个提交对象的 master 分支。
它会在每次的提交操作中自动向前移动。

[注意]
====
Git 的 master 分支并不是一个特殊分支，它就跟其他分支完全没有区别。
之所以几乎每一个仓库都有 master 分支，是因为 `git init` 命令默认创建它，并且大多数人都不想去改动它。
====

.master 分支和它提交历史
image::images/branch-and-history.png[master 分支和它提交历史.]

[[_create_new_branch]]
==== 创建新分支

(((branches, creating)))
Git 是怎么创建新分支的呢？
很简单，创建一个分支指针即可。
比如，创建一个 testing 分支，这需要使用 `git branch` 命令：(((git commands, branch)))

[source,console]
----
$ git branch testing
----

这会在当前提交对象上创建一个分支指针。

.两个指向相同提交历史的分支
image::images/two-branches.png[两个指向相同提交历史的分支.]

那么，Git 又是怎么知道当前在哪一个分支上呢？
也很简单，它有一个名为 `HEAD` 的特殊指针。
请注意它和许多其它版本控制系统（如 Subversion 或 CVS）里的 HEAD 概念完全不同。
在 Git 中，它是一个指针，指向当前所在的本地分支（译注：将 HEAD 想象为当前分支的别名）。
在本例中，您仍然在 master 分支上。
因为 `git branch` 命令仅仅_创建_一个新分支，并不会自动切换到新分支中去。

.HEAD 指向当前所在的分支
image::images/head-to-master.png[HEAD 指向当前所在的分支.]

您可以运行 `git log` 命令看看各个分支当前所指的对象。提供这一功能的参数是 `--decorate`。

[source,console]
----
$ git log --oneline --decorate
f30ab (HEAD, master, testing) add feature #32 - ability to add new
34ac2 fixed bug #1328 - stack overflow under certain conditions
98ca9 initial commit of my project
----

正如您所见，当前 ``master'' 和 ``testing'' 分支均指向校验和以 `f30ab` 开头的提交对象。

[[_switching_branches]]
==== Switching Branches

(((branches, switching)))
To switch to an existing branch, you run the `git checkout` command.(((git commands, checkout)))
Let's switch to the new testing branch:

[source,console]
----
$ git checkout testing
----

This moves `HEAD` to point to the `testing` branch.

.HEAD points to the current branch
image::images/head-to-testing.png[HEAD points to the current branch.]

What is the significance of that?
Well, let's do another commit:

[source,console]
----
$ vim test.rb
$ git commit -a -m 'made a change'
----

.The HEAD branch moves forward when a commit is made
image::images/advance-testing.png[The HEAD branch moves forward when a commit is made.]

This is interesting, because now your testing branch has moved forward, but your master branch still points to the commit you were on when you ran `git checkout` to switch branches.
Let's switch back to the master branch:

[source,console]
----
$ git checkout master
----

.HEAD moves when you checkout
image::images/checkout-master.png[HEAD moves when you checkout.]

That command did two things.
It moved the HEAD pointer back to point to the master branch, and it reverted the files in your working directory back to the snapshot that master points to.
This also means the changes you make from this point forward will diverge from an older version of the project.
It essentially rewinds the work you've done in your testing branch so you can go in a different direction.

[NOTE]
.Switching branches changes files in your working directory
====
It's important to note that when you switch branches in Git, files in your working directory will change.
If you switch to an older branch, your working directory will be reverted to look like it did the last time you committed on that branch.
If Git cannot do it cleanly, it will not let you switch at all.
====

Let's make a few changes and commit again:

[source,console]
----
$ vim test.rb
$ git commit -a -m 'made other changes'
----

Now your project history has diverged (see <<divergent_history>>).
You created and switched to a branch, did some work on it, and then switched back to your main branch and did other work.
Both of those changes are isolated in separate branches: you can switch back and forth between the branches and merge them together when you're ready.
And you did all that with simple `branch`, `checkout`, and `commit` commands.

[[divergent_history]]
.Divergent history
image::images/advance-master.png[Divergent history.]

You can also see this easily with the `git log` command.
If you run `git log --oneline --decorate --graph --all` it will print out the history of your commits, showing where your branch pointers are and how your history has diverged.

[source,console]
----
$ git log --oneline --decorate --graph --all
* c2b9e (HEAD, master) made other changes
| * 87ab2 (testing) made a change
|/
* f30ab add feature #32 - ability to add new formats to the
* 34ac2 fixed bug #1328 - stack overflow under certain conditions
* 98ca9 initial commit of my project
----

Because a branch in Git is in actuality a simple file that contains the 40 character SHA-1 checksum of the commit it points to, branches are cheap to create and destroy.
Creating a new branch is as quick and simple as writing 41 bytes to a file (40 characters and a newline).

This is in sharp contrast to the way most older VCS tools branch, which involves copying all of the project's files into a second directory.
This can take several seconds or even minutes, depending on the size of the project, whereas in Git the process is always instantaneous.
Also, because we're recording the parents when we commit, finding a proper merge base for merging is automatically done for us and is generally very easy to do.
These features help encourage developers to create and use branches often.

Let's see why you should do so.
