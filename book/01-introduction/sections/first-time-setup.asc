[[_first_time]]
=== 初次运行 Git 前的配置

既然你已经在你的系统上安装了 Git，你会想要做几件事情来定制你的 Git 环境。
你在每一台计算机上只需要做这些事一次；它们会在升级时保留下来。
你可以在任何时候再次通过运行命令来修改它们。

Git 自带一个 `git config` 的工具来帮助你设置决定 Git 外观和行为的配置变量。(((git commands, config)))
这些变量存储在三个不同的位置：

1. `/etc/gitconfig` 文件: 包含系统上每一个用户及他们仓库的通用配置。
  若使用带有 `--system` 选项的 `git config` 时，它会从此文件读写配置变量。
2. `~/.gitconfig` 或 `~/.config/git/config` 文件：特定针对你的用户。
  你可以传递 `--global` 选项让 Git 特定读写此文件。
3. 你当前正在使用仓库的 Git 目录中的 `config` 文件（就是 `.git/config`）：特指那个单独的仓库。

每一个级别覆盖上一级别的配置，所以 `.git/config` 的配置变量会覆盖 `/etc/gitconfig` 中的配置变量。

在 Windows 系统中，Git 会查找 `$HOME` 目录下（对大多数人来说是 `C:\Users\$USER`）的 `.gitconfig` 文件。
它同样也会寻找 `/etc/gitconfig` 文件，尽管它的路径是相对于 MSys 的根目录，即你运行安装文件时安装 Git 时所选择的安装目录。

==== 用户信息

当你安装完 Git 应该做的第一件事就是设置你的用户名称与邮件地址。
这很重要是因为每一个 Git 的提交都会使用这个信息，并且它会在你开始创建提交时永恒不变地嵌入到提交里：

[source,console]
----
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
----

再次强调，如果你使用了 `--global` 参数那么只需要运行一次，因为之后无论你在那个系统上做任何事情 Git 都会使用那个信息。
当你想针对特定项目使用不同的用户名称与邮件地址时，你可以在那个项目目录下运行没有 `--global` 参数的命令来配置。

很多 GUI 工具会在你第一次运行时帮助你配置这些。

==== 文本编辑器

既然用户信息已经设置完毕，你可以配置默认文本编辑器，当 Git 需要你输入信息时会调用它。
如果未配置，Git 会使用操作系统默认的文本编辑器，通常是 Vim。
如果你想使用不同的文本编辑器，例如 Emacs，你可以这样做：

[source,console]
----
$ git config --global core.editor emacs
----

[WARNING]
====
Vim 和 Emacs 是像 Linux 与 Mac 等基于 Unix 的系统上开发者经常使用的流行的文本编辑器。如果你对这些编辑器都不是很了解或者你使用的是 Windows 系统，那么你可能需要搜索如何在 Git 中配置你最爱的编辑器。
如果你不设置编辑器并且你不知道 Vim 或 Emacs 是什么，当它们运行时你可能会进入一个真的令人困惑的状态。
====

==== 检查配置信息

如果你想要检查你的配置，你可以使用 `git config --list` 命令来列出所有 Git 当时能找到的配置。

[source,console]
----
$ git config --list
user.name=John Doe
user.email=johndoe@example.com
color.status=auto
color.branch=auto
color.interactive=auto
color.diff=auto
...
----

你可能看到重复的变量名，因为 Git 从不同的文件中读取同一个配置（例如：`/etc/gitconfig` 与 `~/.gitconfig`）。
这种情况下，Git 会使用它看到的每一个独立变量的最后一个配置。

你可以检查 Git 的某一项配置通过输入 `git config <key>`：(((git commands, config)))

[source,console]
----
$ git config user.name
John Doe
----
